<!DOCTYPE HTML>
<html>
	<head>
		<title>Bus Data Star of the City of Albuquerque</title>
		<meta type="description" content="This is a colorful star driven by the City of Albuquerque's open data on city busses.">
		<meta type="og:author" content= "Caroline C. Blaker">
		<link href="https://fonts.googleapis.com/css?family=Merriweather:400,700'" rel="stylesheet">
		<style>
			body {
				font-family:"Helvetica Neue", Helvetica, sans-serif;
				font-size:15.3px;
				line-height:1.3em;
			}
			h1, h2, h3 {
				font-family:"Merriweather", serif;
			}
			h2 {
				font-weight:400;
			}
			header {
				padding:30px;
				text-align:center;
				background-color:#efefef;
			}
			canvas {
				width: 100%;
				background-color:#fff;
				margin: 0 0 5% -1px;
				border:1px solid red;
				
			}
			.container {
				width:94%;
				margin: 3%;
				
			}
			footer {
				font-size:10px;
			}
		</style>
		
	</head>
	<body>
		
		<div class='container' id="page">
			<header>
				<h1>ABQ Bus Data Star</h1>
				<h2>Because Open Data deserves to shine</h2>
				<h5>by <a href="http://twitter.com/carolinecblaker">Caroline C. Blaker</a></h5>
				<h6>Version 6: 1/9/17</h6>
			</header>
			<div id="holder"></div>
			<canvas id='busStar'></canvas>
			<aside>
				<h3>What the heck?</h3>
				<p>The shape you see here is generated entirely out of up-to-the-second positions of the busses in the City of Albuquerque, and Javascript.</p>
				<p>Refreshing the page will reveal a different, though probably similar, shape. The positions of the busses update with every page refresh.</p>
				<p>The intent of this project is to continue development to create a beautiful, animated, data-driven spectacle showcasing the beauty and abstract reaches of Open Data. With the dataset refreshing itself every 15 seconds, there are limitless ways to create beautiful abstract visualizations, utilitarian visualizations, or anything in between. </p>
				<h3>Albuquerque Open Data</h3>
				<p>Through its Open Data initiative, the City of Albuquerque publishes governmental data it uses to keep track of raw information related to the City of Albuquerque. The directory of existing open data can be found here: <a href="https://www.cabq.gov/abq-data/">https://www.cabq.gov/abq-data/</a>. Updates to this data are automated in real time, every day.</p>
			
			
			</aside>
			<footer>
			<p>Copyright &copy;Caroline C. Blaker - MIT License <a href="http://github.com/carolinecblaker">GitHub</a></p>
			</footer>
			</div>
		</div>
		<script src="../vendor/fetch/fetch.js"></script>  
		   <!-- That all browsers may one day support Fetch. Until then, polyfill so that those of us who adopt it early don't look like idiots. -->
		<script src="../vendor/raphael/raphael.min.js"></script>    
		   <!-- I could either try to reverse engineer every method in this library, or just include it. Thank you, Dimitry Baranovskiy -->
		<script>
		
		const endpoint = '../allroutes-petroglyph.kml'; //http://data.cabq.gov/transit/realtime/route/allroutes.kml
		const points = []; //name, longitude, latitude
		var oldData = [];
		
		const prom = fetch(endpoint).then(blob => blob.text())
		.then(str => (new window.DOMParser()).parseFromString(str, "text/xml"))
        .then(data => xmlToJson(data)) //Ideally, would I be able to pare down the excess crap here?
        .then(data => formatObj(data))
        .then(data => paintStar(data, oldData))
        .then(data => clearArray(oldData))
		.then(data => oldData.push(...data))
		
        .then(data => console.log(oldData));
        
        function test(info){
	        console.log(info);
        }
        function clearArray(oldData){
	        return oldData;
        }
        
        function paintStar(points, oldPoints){
        	if(oldPoints.length ===0){
	         
	         var startLat = 0;
	         var startLong = 0;
        	}
        	
        	
			var canvas = document.getElementById('busStar');
		     
		     var canvWidth= document.getElementById('page').offsetWidth;
		     var canvHeight= canvWidth;
			 canvas.width =  parent.innerWidth;
			 canvas.height = canvas.width;
			 var context = canvas.getContext('2d');
			 
			 //get range of max/min latitudes & longitudes
			 
			 var maxLat = Math.max.apply(Math,points.map(function(o){return o.latitude;}))
			 var minLat = Math.min.apply(Math,points.map(function(o){return o.latitude;}))
			 
			 var maxLon = Math.max.apply(Math,points.map(function(o){return o.longitude;}))
			 var minLon = Math.min.apply(Math,points.map(function(o){return o.longitude;}))
			
	    
			 for (var key in points) {
			    //															preportion
			    //find the coord = truncate -> actual measurement normalized over max and min normalized
			    
			    points[key]['x']= Math.trunc((((points[key]['longitude'] - minLon)/(maxLon - minLon)) * canvWidth ));
			    points[key]['y']= Math.trunc(((points[key]['latitude'] - minLat)/(maxLat - minLat)) * canvHeight) ;
			    
			    const origin = canvWidth/2+','+canvHeight/2;
			   // context.beginPath();
			    context.lineWidth=3;
				context.globalCompositeOperation = 'destination-atop';
			    context.strokeStyle = points[key]['color'];
			    //context.fillStyle = 'rgba(0,0,0,0.7)';
			    context.rect(points[key]['x'], points[key]['y'], 0,0);
				context.stroke();
				context.lineTo(canvWidth/2,canvHeight/2);
			//	context.closePath();
			    let value = points[key];
			    console.log(value['color']);
			}

	        return points;
	        
	        
        }
        
        
        
        
        
		function formatObj(data){
			pointObj = data.kml.Document.Placemark;
			var returnVal = [];
			
			Object.keys(pointObj).forEach(function (key) {
			
			  let obj = pointObj[key];
			  returnVal[key] =[];
			  
			  const busName= obj.name['#text'];
			  const [longitude, latitude]= obj.Point.coordinates['#text'].split(',');
			  
			  returnVal[key]['name']= busName;
			  returnVal[key]['latitude']= latitude;
			  returnVal[key]['longitude']= longitude;
			  returnVal[key]['color']= Raphael.getColor('0.9');
			  
			  const vehicleNum = obj.description.table.tr[0].td[1]['#text'];
			  const speed = obj.description.table.tr[1].td[1]['#text'];
			  const lastPing = obj.description.table.tr[2].td[1]['#text'];
			  const lastStop = obj.description.table.tr[3].td[1]['#text'];
			  
			 // const vehicle = obj.description.table.tr.td['1']['#text'];
			 // console.log(obj.description.table.tr[3].td[1]['#text']);
			//  console.log(obj);
			});
			//window.console.log(returnVal);
			return returnVal;
		}

		function xmlToJson(xml) { // THANK YOU DAVID WALSH https://davidwalsh.name/convert-xml-json
			
			// Create the return object
			var obj = {};
		
			if (xml.nodeType == 1) { // element
				// do attributes
				if (xml.attributes.length > 0) {
				obj["@attributes"] = {};
					for (var j = 0; j < xml.attributes.length; j++) {
						var attribute = xml.attributes.item(j);
						obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
					}
				}
			} else if (xml.nodeType == 3) { // text
				obj = xml.nodeValue;
			}
		
			// do children
			if (xml.hasChildNodes()) {
				for(var i = 0; i < xml.childNodes.length; i++) {
					var item = xml.childNodes.item(i);
					var nodeName = item.nodeName;
					
					if (typeof(obj[nodeName]) == "undefined" ) {
						obj[nodeName] = xmlToJson(item);
					//	console.log(nodeName);
					} else {
						if (typeof(obj[nodeName].push) == "undefined") {
							var old = obj[nodeName];
							obj[nodeName] = [];
							obj[nodeName].push(old);
						}
						obj[nodeName].push(xmlToJson(item));
					}
				}
			}
			//console.log(obj);
			return obj;
		};
		
		</script>
	</body>
</html>